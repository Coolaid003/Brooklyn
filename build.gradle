apply from: file('gradle/license.gradle')
apply from: file('gradle/environment.gradle')
apply from: file("gradle/dependency-versions.gradle")

buildscript {
  repositories {
    mavenCentral()
  }
  apply from: file('gradle/buildscript.gradle'), to: buildscript
}

allprojects {
  group = "com.github.datastream"

  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'project-report'
  apply plugin: 'checkstyle'

  repositories {
    mavenCentral()
    mavenLocal()
  }
}

idea {
  project {
    languageLevel = 1.8
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'pegasus'

  testReportDirName = "${project.rootDir}/out/${project.name}/"

  // Avoid failure in internal LinkedIn build validation
  if (!ext.has('spec')) {
    ext.spec = [:]
  }

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    sourceSets = [ getProject().sourceSets.main, getProject().sourceSets.test ]
    toolVersion = "6.7"
    ignoreFailures = false
  }

  spec['product'] = ['pegasus':
                         ['data'        : 'com.linkedin.pegasus:data:' + pegasusVersion,
                          'restliCommon': 'com.linkedin.pegasus:restli-common:' + pegasusVersion,
                          'restliClient': 'com.linkedin.pegasus:restli-client:' + pegasusVersion,]
  ]

  // comment this out so the java files don't get auto-generated every time
  afterEvaluate {
    if (project.plugins.hasPlugin('pegasus')) {
      // add the standard pegasus dependencies wherever the plugin is used
      dependencies {
        dataTemplateCompile spec.product.pegasus.data
        restClientCompile spec.product.pegasus.restliClient

        // needed for Gradle 1.9+
        restClientCompile spec.product.pegasus.restliCommon
      }
    }
  }

  def results = [:].withDefault { [] }
  test {
    useTestNG()
    testLogging {
      exceptionFormat = 'full'
      events "started", "passed", "skipped", "failed"
    }
    onOutput { descriptor, event ->
      results[descriptor.toString()] << event.message
    }

    afterTest { descriptor, result ->
      if(result.getResultType() == TestResult.ResultType.FAILURE) {
        logger.lifecycle("${descriptor.toString()} failed with output:\n${results[descriptor.toString()].join('')}")
      }
      results[descriptor.toString()] = []
    }
  }

  dependencies {
    compile "log4j:log4j:$log4jVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "org.apache.commons:commons-lang3:$commonslang3Version"
    compile "io.dropwizard.metrics:metrics-core:$metricsCoreVersion"
    testCompile "org.testng:testng:$testngVersion"
  }

  jar {
    manifest {
      attributes 'Implementation-Title': 'Datastream'
    }
  }

  tasks.withType(JavaCompile) {
    // Skipping 'deprecation' since pegasus generates problematic files and 'fallthrough' since it can't be suppressed
    // Xlint:all - [deprecation, fallthrough]
    options.compilerArgs = ["-Xlint:cast,classfile,dep-ann,divzero,empty,finally,options,overrides,path,processing,rawtypes,serial,static,try,unchecked,varargs", "-Werror"]
  }
}

project(':datastream-common') {

  dependencies {
    compile "org.apache.avro:avro:$avroVersion"
    compile "com.linkedin.pegasus:restli-server:$pegasusVersion"
  }
}

project(':datastream-server-api') {
  dependencies {
    compile project(':datastream-common')
    compile project(':datastream-utils')
  }
}

project(':datastream-utils') {
  dependencies {
    compile project(':datastream-common')
    compile "com.101tec:zkclient:$zkclientVersion"
    testCompile project(':datastream-kafka')
    testCompile project(':datastream-testcommon')
  }
}

project(':datastream-file-connector') {
  dependencies {
    compile project(':datastream-server-api')
    compile project(':datastream-common')
    compile project(':datastream-utils')
    testCompile project(':datastream-server')
    testCompile project(':datastream-testcommon')
    testCompile 'org.mockito:mockito-core:1.+'
  }
}

project(':datastream-mysql-connector') {
  dependencies {
    compile project(':datastream-server-api')
    compile "org.apache.avro:avro:$avroVersion"
    compile "com.zendesk:open-replicator:1.4.2"
    testCompile 'org.mockito:mockito-core:1.+'
  }
}

project(':datastream-kafka') {
  dependencies {
    compile "org.apache.kafka:kafka_2.10:$kafkaVersion"

    compile project(':datastream-server-api')
    compile project(':datastream-utils')
    compile project(':datastream-testcommon')

    tasks.create(name: "copyDependantLibs", type: Copy) {
      from (configurations.runtime) {
      }
      into "$buildDir/dependant-libs"
    }

    jar {
      dependsOn 'copyDependantLibs'
    }
  }
}

project(':datastream-testcommon') {
  dependencies {
    compile project(':datastream-server-api')
    compile project(':datastream-common')
    compile project(':datastream-utils')
    compile project(':datastream-server')
    compile project(':datastream-client')
    compile "com.intellij:annotations:$intellijAnnotations"
    compile "commons-cli:commons-cli:$commonsCliVersion"
    compile "org.apache.avro:avro:$avroVersion"
    compile "org.apache.zookeeper:zookeeper:$zookeeperVersion"
    compile "com.linkedin.pegasus:restli-server:$pegasusVersion"
  }
}

project(':datastream-client') {

  dependencies {
    compile project(path: ':datastream-common', configuration: 'restClient')

    compile "com.linkedin.pegasus:restli-client:$pegasusVersion"
    compile "com.linkedin.pegasus:r2-netty:$pegasusVersion"
    compile "org.apache.avro:avro:$avroVersion"

    compile project(':datastream-common')
    compile project(':datastream-utils')

    testCompile project(':datastream-testcommon')
    testCompile project(':datastream-kafka')
    testCompile project(':datastream-server')
  }
}

project(':datastream-server') {
  // ext.commonProject = project(':datastream-common')
   ext.apiProject = project(':datastream-common')
   pegasus.main.idlOptions.addIdlItem(['com.linkedin.datastream.server.dms', 'com.linkedin.datastream.server.diagnostics'])

  dependencies {
    compile "com.linkedin.pegasus:restli-server:$pegasusVersion"
    compile "com.linkedin.pegasus:restli-netty-standalone:$pegasusVersion"
    compile "com.101tec:zkclient:$zkclientVersion"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonVersion"
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"

    compile project(':datastream-server-api')
    compile project(':datastream-common')
    compile project(':datastream-utils')

    testCompile project(':datastream-kafka')
    testCompile "org.apache.kafka:kafka_2.10:$kafkaVersion"
    testCompile project(':datastream-client')
    testCompile project(':datastream-file-connector')
    testCompile project(':datastream-testcommon')
    testCompile "org.mockito:mockito-core:1.+"
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.runtime) {
    }
    into "$buildDir/dependant-libs"
  }

  jar {
    dependsOn 'copyDependantLibs'
  }

  // For test or experiment purpose
  task startStandaloneRestServer(type: JavaExec) {
    main = 'com.linkedin.restli.server.NettyStandaloneLauncher'
    args = ['-port', '8080', '-packages', 'com.linkedin.datastream.server.dms']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
  }
}
